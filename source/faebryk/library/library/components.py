import logging
from faebryk.library.traits import component

from faebryk.library.trait_impl.component import (
    has_defined_footprint,
    has_defined_footprint_pinmap,
    has_defined_type_description,
    has_symmetric_footprint_pinmap,
)
from faebryk.library.kicad import (
    has_defined_kicad_ref,
    KicadFootprint,
)
logger = logging.getLogger("local_library")

from faebryk.library.core import Component, Parameter
from faebryk.library.library.components import Resistor, BJT
from faebryk.library.library.interfaces import Electrical
from faebryk.library.util import times



class Potentiometer(Component):
    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls, *args, **kwargs)
        self._setup_traits()
        return self

    def __init__(self, resistance: Parameter) -> None:
        super().__init__()
        self._setup_interfaces(resistance)

    def _setup_traits(self):
        # self.add_trait(has_defined_kicad_ref("R"))
        self.add_trait(has_defined_type_description("R"))
        pass

    def _setup_interfaces(self, resistance):

        class _IFs(Component.InterfacesCls()):
            resistors = times(2, Electrical)
            wiper = Electrical()

        self.IFs = _IFs(self)

        class _CMPs(Component.ComponentsCls()):
            resistors = [Resistor(resistance) for _ in range(2)]

        self.CMPs = _CMPs(self)

        self.IFs.wiper.connect_all(
            [
                self.CMPs.resistors[0].IFs.unnamed[1],
                self.CMPs.resistors[1].IFs.unnamed[1],
            ]
        )

        for i, resistor in enumerate(self.CMPs.resistors):
            self.IFs.resistors[i].connect(resistor.IFs.unnamed[0])
            self.CMPs.resistors[i].add_trait(has_symmetric_footprint_pinmap())

    def connect_as_voltage_divider(self, high, low, out):
        self.IFs.resistors[0].connect(high)
        self.IFs.resistors[1].connect(low)
        self.IFs.wiper.connect(out)


class MMBT2N3904(BJT):
    pass


class MMBT2N3906(BJT):
    pass


class AudioJack2_Ground(Component):
    """
    Generated by symbol_converter
    filepath: /usr/share/kicad/symbols/Connector.kicad_sym
    hash: ee6acb9e5c100cbc618b09d382a2e9d817a011d2
    source:
        omitted
    """

    def _setup_traits(self):
        self.add_trait(has_defined_kicad_ref("J"))
        self.add_trait(has_defined_type_description("AudioJack2_Ground"))
        return

    def _setup_interfaces(self):
        class _IFs(Component.InterfacesCls()):
            G = Electrical()
            S = Electrical()
            T = Electrical()

        self.IFs = _IFs(self)
        return

    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls)
        self._setup_traits()
        return self

    def __init__(self):
        super().__init__()
        self._setup_interfaces()
        return

class _2N3904(Component):
    """
    Generated by symbol_converter
    filepath: /usr/share/kicad/symbols/Transistor_BJT.kicad_sym
    hash: 5a6074b533a5e64bf5672a15f73eb456875e8407
    source:
        omitted
    """

    def _setup_traits(self):
        self.add_trait(has_defined_footprint(KicadFootprint("Package_TO_SOT_THT:TO-92_Inline")))
        self.add_trait(has_defined_kicad_ref("Q"))
        self.add_trait(has_defined_type_description("2N3904"))
        return

    def _setup_interfaces(self):
        class _IFs(Component.InterfacesCls()):
            E = Electrical()
            B = Electrical()
            C = Electrical()

        self.IFs = _IFs(self)
        return

    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls)
        self._setup_traits()
        return self

    def __init__(self):
        super().__init__()
        self._setup_interfaces()
        self.add_trait(has_defined_footprint_pinmap({"1": self.IFs.E, "2": self.IFs.B, "3": self.IFs.C}))
        return

class _2N3906(Component):
    """
    Generated by symbol_converter
    filepath: /usr/share/kicad/symbols/Transistor_BJT.kicad_sym
    hash: 5a6074b533a5e64bf5672a15f73eb456875e8407
    source:
        omitted
    """

    def _setup_traits(self):
        self.add_trait(has_defined_footprint(KicadFootprint("Package_TO_SOT_THT:TO-92_Inline")))
        self.add_trait(has_defined_kicad_ref("Q"))
        self.add_trait(has_defined_type_description("2N3906"))
        return

    def _setup_interfaces(self):
        class _IFs(Component.InterfacesCls()):
            E = Electrical()
            B = Electrical()
            C = Electrical()

        self.IFs = _IFs(self)
        return

    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls)
        self._setup_traits()
        return self

    def __init__(self):
        super().__init__()
        self._setup_interfaces()
        self.add_trait(has_defined_footprint_pinmap({"1": self.IFs.E, "2": self.IFs.B, "3": self.IFs.C}))
        return

class AudioJack2_GroundFP(AudioJack2_Ground):
    def __init__(self):
        super().__init__()

        self.add_trait(
            has_defined_footprint(
                KicadFootprint(
                    "Connector_Audio:Jack_3.5mm_QingPu_WQP-PJ398SM_Vertical_CircularHoles"
                )
            )
        )
        self.add_trait(
            has_defined_footprint_pinmap(
                {
                    "S": self.IFs.S,
                    "G": self.IFs.G,
                    "T": self.IFs.T,
                }
            )
        )